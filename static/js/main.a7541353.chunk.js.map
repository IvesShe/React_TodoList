{"version":3,"sources":["components/Header/index.jsx","components/Footer/index.jsx","components/Item/index.jsx","components/List/index.jsx","App.jsx","index.js"],"names":["Header","handleKeyUp","event","keyCode","target","value","trim","alert","console","log","todoObj","id","nanoid","name","done","props","addTodo","className","onKeyUp","this","type","placeholder","Component","Footer","handleCheckAll","checkAllTodo","checked","handleClearAllDone","clearAllDone","todos","doneCount","reduce","pre","todo","total","length","onChange","onClick","Item","state","mouse","handleMouse","flag","setState","handleCheck","updateTodo","handleDelete","window","confirm","deleteTodo","style","backgroundColor","onMouseEnter","onMouseLeave","display","List","map","App","newTodos","filter","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7541353.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {nanoid} from 'nanoid'\r\nimport './index.css'\r\n\r\nexport default class Header extends Component {\r\n\r\n    // 對接收的props進行: 類型、必要性的限制\r\n    static propTypes={\r\n        addTodo:PropTypes.func.isRequired\r\n    }\r\n\r\n    // 鍵盤事件的回調\r\n    handleKeyUp = (event)=>{\r\n        const {keyCode,target} = event;\r\n\r\n        // 判斷是否為Enter按鍵\r\n        if(keyCode !== 13) return;\r\n\r\n        // 添加的todo名字不能為空\r\n        if(target.value.trim() === ''){\r\n            alert('輸入不能為空');\r\n        }\r\n\r\n        // 打印所按的值、按鍵的值\r\n        console.log(target.value, keyCode);\r\n\r\n        // 準備好一個todo對象\r\n        const todoObj = {id:nanoid(),name:target.value,done:false};\r\n        console.log(todoObj);\r\n\r\n        // 將todoObj傳遞給App\r\n        this.props.addTodo(todoObj);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"todo-header\">\r\n                <input onKeyUp={this.handleKeyUp} type=\"text\" placeholder=\"请输入你的任务名称，按回车键确认\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nexport default class Footer extends Component {\r\n\r\n    // 全選checkbox的回調\r\n    handleCheckAll = (event)=>{\r\n        this.props.checkAllTodo(event.target.checked);\r\n    }\r\n\r\n    // 清除已完成任務的回調\r\n    handleClearAllDone = ()=>{\r\n        this.props.clearAllDone();\r\n    }\r\n\r\n    render() {\r\n        const {todos} = this.props;\r\n\r\n        // 已完成的個數\r\n        //const doneCount = todos.reduce((pre,todo)=>{return pre+(todo.done?1:0)},0);\r\n        const doneCount = todos.reduce((pre, todo) => pre + (todo.done ? 1 : 0), 0);\r\n        console.log('@@@', doneCount);\r\n\r\n        // 總數\r\n        const total = todos.length;\r\n\r\n        return (\r\n            <div className=\"todo-footer\">\r\n                <label>\r\n                    <input type=\"checkbox\" onChange={this.handleCheckAll} checked={doneCount === total && total !== 0 ? true:false} />\r\n                </label>\r\n                <span>\r\n                    <span>已完成{doneCount}</span> / 全部{total}\r\n            </span>\r\n                <button onClick={this.handleClearAllDone} className=\"btn btn-danger\">清除已完成任务</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport './index.css'\r\n\r\nexport default class Item extends Component {\r\n\r\n    state = {mouse:false};\r\n\r\n    // 鼠標移入、移出的回調\r\n    handleMouse = (flag) =>{\r\n        return ()=>{\r\n            console.log(flag);\r\n            this.setState({mouse:flag});\r\n        }\r\n    }\r\n\r\n    // 勾選、取消勾選某一個todo的回調\r\n    handleCheck = (id)=>{\r\n        return (event)=>{\r\n            console.log(id,event.target.checked);\r\n            this.props.updateTodo(id,event.target.checked);\r\n        }\r\n    }\r\n\r\n    // 刪除一個todo的回調\r\n    handleDelete = (id)=>{\r\n        if(window.confirm('確定刪除嗎?')){\r\n            this.props.deleteTodo(id);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {id,name,done} = this.props;\r\n        const {mouse} = this.state;\r\n\r\n        return (\r\n            <li style={{backgroundColor:mouse ? '#ddd':'white'}} onMouseEnter={this.handleMouse(true)} onMouseLeave={this.handleMouse(false)} >\r\n                <label>\r\n                    <input type=\"checkbox\" checked={done} onChange={this.handleCheck(id)} />\r\n                    <span>{name}</span>\r\n                </label>\r\n                <button onClick={()=>{this.handleDelete(id)}} className=\"btn btn-danger\" style={{ display:mouse?'block':'none' }}>删除</button>\r\n            </li>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Item from '../Item'\r\nimport './index.css'\r\n\r\nexport default class List extends Component {\r\n\r\n    // 對接收的props進行: 類型、必要性的限制\r\n    static propTypes={\r\n        addTodo:PropTypes.array,\r\n        updateTodo:PropTypes.func.isRequired,\r\n        deleteTodo:PropTypes.func.isRequired\r\n    }\r\n\r\n    render() {\r\n        \r\n        const {todos,updateTodo,deleteTodo} = this.props\r\n\r\n        return (\r\n            <ul className=\"todo-main\">\r\n                {\r\n                    todos.map((todo)=>{\r\n                        // 每個child要有一個key\r\n                        return <Item key={todo.id} {...todo} updateTodo={updateTodo}  deleteTodo={deleteTodo} />\r\n                    })\r\n                }\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nimport {nanoid} from 'nanoid'\r\nimport Header from './components/Header'\r\nimport Footer from './components/Footer';\r\nimport List from './components/List';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  // 狀態在哪裡，操作狀態的方法就在哪裡\r\n\r\n  // 初始化狀態\r\n  state = {\r\n    todos:[\r\n      {id:nanoid(),name:'吃飯',done:true},\r\n      {id:nanoid(),name:'睡覺',done:true},\r\n      {id:nanoid(),name:'打代碼',done:false},\r\n      {id:nanoid(),name:'逛街',done:false},\r\n    ]\r\n  }\r\n\r\n  // addTodo用於添加一個todo，接收的參數是todo對象\r\n  addTodo = (todoObj)=>{\r\n    // 獲取原todos\r\n    const {todos} = this.state;\r\n\r\n    // 追加一個todo\r\n    const newTodos = [todoObj,...todos];\r\n\r\n    // 更新狀態\r\n    this.setState({todos:newTodos});\r\n  }\r\n\r\n  // updateTodo用於更新一個todo對象\r\n  updateTodo = (id,done)=>{\r\n    // 獲取狀態中的todos\r\n    const {todos} = this.state;\r\n\r\n    // 匹配處理數據\r\n    const newTodos = todos.map((todoObj)=>{\r\n      // 判斷id是自己的話，則更新done的值\r\n      if(todoObj.id === id) return{...todoObj,done}\r\n      else return todoObj\r\n    })\r\n\r\n    this.setState({todos:newTodos})\r\n  }\r\n\r\n  // deleteTodo用於刪除一個todo對象\r\n  deleteTodo = (id)=>{\r\n    const {todos} = this.state;\r\n\r\n    // 獲取指定id的todo對象\r\n    const newTodos = todos.filter((todoObj)=>{\r\n      return todoObj.id !== id\r\n    })\r\n\r\n    // 更新狀態\r\n    this.setState({todos:newTodos});\r\n  }\r\n\r\n  // checkAllTodo用於全選\r\n  checkAllTodo = (done)=>{\r\n    // 獲取原來的todos\r\n    const {todos} = this.state;\r\n\r\n    // 加工數據\r\n    const newTodos = todos.map((todoObj)=>{\r\n      return {...todoObj,done}\r\n    })\r\n\r\n    // 更新狀態\r\n    this.setState({todos:newTodos});\r\n  }\r\n\r\n  // clearAll用於清除所有已完成的\r\n  clearAllDone = ()=>{\r\n    // 獲取原來的todos\r\n    const {todos}  = this.state;\r\n\r\n    // 過濾數據\r\n    const newTodos = todos.filter((todoObj)=>{\r\n        return !todoObj.done;\r\n    });\r\n\r\n    // 更新狀態\r\n    this.setState({todos:newTodos});\r\n  }\r\n\r\n  render() {\r\n\r\n    const {todos} = this.state\r\n\r\n    return (\r\n      <div className=\"App\" >\r\n        <div className=\"todo-container\">\r\n          <div className=\"todo-wrap\">\r\n            <Header addTodo={this.addTodo}/>\r\n            <List todos={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo} />\r\n            <Footer todos={todos} checkAllTodo={this.checkAllTodo} clearAllDone={this.clearAllDone} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//export default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n//import './index.css';\r\nimport App from './App';\r\n//import reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n//reportWebVitals();\r\n"],"sourceRoot":""}